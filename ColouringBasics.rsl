scheme ColouringBasics =
  class
    type
      Piece = Text,
      Relation = (Piece >< Piece)-set,
      Colour = Piece-set,
      Colouring = Colour-set

    value /* auxiliary functions */
      areNb : Piece >< Piece >< Relation -> Bool
      areNb(cn1, cn2, r) is (cn1, cn2) isin r,

      -- a piece can't be a neighbour of itself
      -- a piece can't be a neighbour of a piece that is not in the relation
      -- a piece can't have no neighbours
      -- isCorrectColouring : Colouring >< Relation -> Bool
      -- isCorrectColouring(cols, r) is ...,

      isRelation : Relation -> Bool
      isRelation(r) is true,

      isCorrectColouring : Colouring >< Relation -> Bool
      isCorrectColouring(cols, r) is
        isRelation(r) /\
        (all c : Colour :-
           c isin cols =>
             (all p : Piece :-
                p isin c =>
                  ~ (exists p2 : Piece :- p2 isin c /\ areNb(p, p2, r)))),

      r : Relation =
        {("P1", "P2"), ("P1", "P3"), ("P2", "P4"), ("P2", "P5"), ("P3", "P7"),
         ("P4", "P5"), ("P4", "P6"), ("P4", "P7"), ("P4", "P8"), ("P5", "P6"),
         ("P6", "P8"), ("P7", "P8")},
      colouring : Colouring =
        {{"P1", "P4"}, {"P2", "P3", "P6"}, {"P7", "P5"}, {"P8"}}

    test_case
      [t1]
        areNb("P1", "P2", r) = true,
      [t2]
        areNb("P1", "P8", r) = false,
      [t3]
        isCorrectColouring(colouring, r) = true
  end
